@use "../../../styles/color.scss" as *;
@import '../../../styles/utils';

@mixin animate($animation,$duration,$method,$times){
    animation: $animation $duration $method $times;
}

@mixin keyframes($name){
    @keyframes #{$name}{
        @content;
    }
}
.rotateIcon_wrapper{
    position:absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}



.rotateIcon {
    @include keyframes(rotate) {
        100% {
            transform: rotate(360deg); 
        }
    }
    @include animate(rotate, 0.8s, linear, infinite);
}

// $TODO: 햄버거 => x버튼 애니매이션 구현
.exitToBurgerContainer{
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;

    
    width: 40px;
    height: 40px;
    background-color: var(--color-surface);
    border-radius: 4px;

    .exitBtn {
        position: relative;
        -webkit-transform: rotate(0deg);
        -moz-transform: rotate(0deg);
        -o-transform: rotate(0deg);
        transform: rotate(0deg);
        -webkit-transition: .5s ease-in-out;
        -moz-transition: .5s ease-in-out;
        -o-transition: .5s ease-in-out;
        transition: .5s ease-in-out;
        cursor: pointer;

        .stick {
            cursor: pointer;
            display: block;
            position: absolute;
            height: 3px;
            width: 16px;
            background: var(--color-primary);
            opacity: 1;
            left: 50%;
            -webkit-transform: rotate(0deg) translate(-50%);
            -moz-transform: rotate(0deg) translate(-50%);
            -o-transform: rotate(0deg) translate(-50%);
            transform: rotate(0deg) translate(-50%);
            -webkit-transition: .25s ease-in-out;
            -moz-transition: .25s ease-in-out;
            -o-transition: .25s ease-in-out;
            transition: .25s ease-in-out;
        }
        .stick1{
            top: -8.5px;
            -webkit-transform-origin: left center;
            -moz-transform-origin: left center;
            -o-transform-origin: left center;
            transform-origin: left center;
        }
        .stick2 {
            top: -1px;
            -webkit-transform-origin: left center;
            -moz-transform-origin: left center;
            -o-transform-origin: left center;
            transform-origin: left center;
        }
        .stick3 {
            top: 6.5px;
            -webkit-transform-origin: left center;
            -moz-transform-origin: left center;
            -o-transform-origin: left center;
            transform-origin: left center;
        }
    }
    
    .exitBtn.open {

        .stick{
            width:20px;
        }

        .stick1{
            -webkit-transform: rotate(45deg) translate(-50%);
            -moz-transform: rotate(45deg) translate(-50%);
            -o-transform: rotate(45deg) translate(-50%);
            transform: rotate(45deg) translate(-50%);
            top: -1px;
            left: 50%;
        }
        .stick2{
            width: 0%;
            opacity: 0;
        }
        .stick3{
            -webkit-transform: rotate(-45deg) translate(-50%);
            -moz-transform: rotate(-45deg) translate(-50%);
            -o-transform: rotate(-45deg) translate(-50%);
            transform: rotate(-45deg) translate(-50%);
            top: -1px;
            left: 50%;
        }
    }
}

.btnGroup{
    height: fit-content;
    display: flex;
    width:fit-content; 
    border-radius: 4px;
    .buttonContainer{  
        border-radius: 4px;
    }
    
    &.filled {
        background-color:  var(--color-primary);
    };

    &.tonal {
        background-color: var(--color-secondaryContainer);
    };

    &.outlined {
        background-color: transparent;
        
        .buttonContainer{
            margin-left: 0px;
            &:first-child{
                margin-left: 0px;
                border-radius: 4px 0px 0px 4px !important;
            };

            &:last-child{
                border-radius: 0px 4px 4px 0px !important;
            };

            border-radius: 0px;
            .stateLayer {
                border-radius: 0px;
            };
        }
    };

    &.text {
        background-color: transparent;
        outline: 1px solid var(--color-primary-opacity-16);
    };


}

// DESCRIBE button-state-layer mixin

@mixin button-state-layer($color, $negativeColor) {
    .stateLayer{
        @include state-layer($color);
    }
    &.negativeMood{
        .stateLayer{
            @include state-layer($negativeColor)
        }
    }

    &.focused{
        .stateLayer{
            @include state-layer($color, true);
        }
    }

    &.disable{
        .stateLayer{
            @include state-layer($color, false, true);
        }
    }
}

.buttonContainer {
    border: none;
    display: flex;
    cursor: pointer;
    position: relative;
    align-items: center;
    //Button 컴포넌트
    &.button {
        border-radius: 4px;
        .stateLayer {
            border-radius: 4px;
        }

        //DESCRIBE size 
        &.large {
            padding: 8px 16px;
            gap: 8px;
            @include font-style(label-large);
        }

        &.medium {
            padding: 6px 12px;
            gap: 4px;
            @include font-style(label-large);
        }

        &.small {
            padding: 4px 8px;
            gap: 4px;
            @include font-style(label-small);
        }
    }

    //IconButton 컴포넌트
    &.iconButton {
        border-radius: 50%;
        justify-content: center;
        width: fit-content;
        .stateLayer{
            border-radius: 50%;
        }

        //DESCRIBE size 
        &.large {
            padding: 10px;
        }

        &.medium {
            padding: 7.67px;
        }

        &.small {
            padding: 5.33px;
        }

    }

 //DESCRIBE configuration

    &.filled {
        background-color: var(--color-primary);
        color: var(--color-onPrimary);
        &.negativeMood {
            background-color: var(--color-error);
        }
        @include button-state-layer(on-primary, on-primary);
    };

    &.tonal {
        background-color: var(--color-secondaryContainer);
        color: var(--color-onSecondaryContainer);
        &.negativeMood {
            background-color: var(--color-errorContainer);
        }
        @include button-state-layer(on-primary-container, on-error-container);
    };
    
    &.outlined {
        background-color: transparent;
        color: var(--color-primary);
        outline: 1px solid var(--color-outline);
        &.negativeMood    {
            background-color: transparent;
            color: var(--color-error);
        }
        @include button-state-layer(primary, error);
    };

    &.text {
        background-color: transparent;
        color: var(--color-primary);
        &.negativeMood {
            background-color: transparent;
            color: var(--color-error);
        }
        @include button-state-layer(primary, error);
    }

    &.textGray {
        background-color: transparent;
        color: var(--color-onSurfaceVariant);
        @include button-state-layer(on-surface, on-surface);
    }


//DESCRIBE state

    &.disable {
        color: var(--color-onSurface-opacity-38) !important;
        background-color: var(--color-onSurface-opacity-12) !important;
        cursor: default;
    }

    &.focused {
        cursor: default;
    }


}
