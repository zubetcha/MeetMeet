'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _del = require('del');

var _del2 = _interopRequireDefault(_del);

var _swPrecache = require('sw-precache');

var _swPrecache2 = _interopRequireDefault(_swPrecache);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FILEPATH_WARNING = 'sw-prechache-webpack-plugin filepath: You are using a custom path for your service worker, this may prevent the service worker from working correctly if it is not available in the same path as your application.';

var DEFAULT_CACHE_ID = 'sw-precache-webpack-plugin',
    DEFAULT_WORKER_FILENAME = 'service-worker.js',
    DEFAULT_OUTPUT_PATH = '',
    DEFAULT_PUBLIC_PATH = '',
    DEFAULT_IMPORT_SCRIPTS = [];

var DEFAULT_OPTIONS = {
  cacheId: DEFAULT_CACHE_ID,
  filename: DEFAULT_WORKER_FILENAME,
  forceDelete: false
};

/**
 * SWPrecacheWebpackPlugin - A wrapper for sw-precache to use with webpack
 * @param {object} options - All parameters should be passed as a single options object
 *
 * // sw-precache options:
 * @param {string} [options.cacheId]
 * @param {string} [options.directoryIndex]
 * @param {object|array} [options.dynamicUrlToDependencies]
 * @param {boolean} [options.handleFetch]
 * @param {array} [options.ignoreUrlParametersMatching]
 * @param {array} [options.importScripts]
 * @param {function} [options.logger]
 * @param {number} [options.maximumFileSizeToCacheInBytes]
 * @param {array} [options.navigateFallbackWhitelist]
 * @param {string} [options.replacePrefix]
 * @param {array} [options.runtimeCaching]
 * @param {array} [options.staticFileGlobs]
 * @param {string} [options.stripPrefix]
 * @param {string} [options.templateFilePath]
 * @param {boolean} [options.verbose]
 *
 * // plugin options:
 * @param {string} [options.filename] - Service worker filename, default is 'service-worker.js'
 * @param {string} [options.filepath] - Service worker path and name, default is to use webpack.output.path + options.filename
 * @param {RegExp} [options.staticFileGlobsIgnorePatterns[]] - Define an optional array of regex patterns to filter out of staticFileGlobs
 * @param {boolean} [options.forceDelete=false] - Pass force option to del
 */

var SWPrecacheWebpackPlugin = function () {
  function SWPrecacheWebpackPlugin(options) {
    _classCallCheck(this, SWPrecacheWebpackPlugin);

    this.options = _extends({}, DEFAULT_OPTIONS, options);
    this.overrides = {};
  }

  _createClass(SWPrecacheWebpackPlugin, [{
    key: 'apply',
    value: function apply(compiler) {
      var _this = this;

      compiler.plugin('after-emit', function (compilation, callback) {

        // get the output path specified in webpack config
        var outputPath = compiler.options.output.path || DEFAULT_OUTPUT_PATH;

        // get the public path specified in webpack config
        var _compiler$options$out = compiler.options.output.publicPath,
            publicPath = _compiler$options$out === undefined ? DEFAULT_PUBLIC_PATH : _compiler$options$out;

        // get the importScripts value specified in the sw-precache config

        var _options$importScript = _this.options.importScripts,
            importScripts = _options$importScript === undefined ? DEFAULT_IMPORT_SCRIPTS : _options$importScript;


        if (_this.options.filepath) {
          // warn about changing filepath
          compilation.warnings.push(new Error(FILEPATH_WARNING));
        }

        // get all assets outputted by webpack
        var assetGlobs = Object.keys(compilation.assets).map(function (f) {
          return _path2.default.join(outputPath, f);
        });

        var ignorePatterns = _this.options.staticFileGlobsIgnorePatterns || [];

        // filter staticFileGlobs from ignorePatterns
        var staticFileGlobs = assetGlobs.filter(function (text) {
          return !ignorePatterns.some(function (regex) {
            return regex.test(text);
          });
        });

        var config = {
          staticFileGlobs: staticFileGlobs,
          verbose: true
        };

        if (outputPath) {
          // strip the webpack config's output.path
          config.stripPrefix = '' + outputPath + _path2.default.sep;
        }

        if (publicPath) {
          // prepend the public path to the resources
          config.replacePrefix = publicPath;
        }

        if (importScripts) {
          _this.overrides.importScripts = importScripts.map(function (f) {
            return f.replace(/\[hash\]/g, compilation.hash);
          }) // need to override importScripts with stats.hash
          .map(function (f) {
            return _url2.default.resolve(publicPath, f);
          }); // add publicPath to importScripts
        }

        var done = function done() {
          return callback();
        };
        var error = function error(err) {
          return callback(err);
        };

        _this.writeServiceWorker(compiler, config).then(done, error);
      });
    }
  }, {
    key: 'writeServiceWorker',
    value: function writeServiceWorker(compiler, config) {
      var fileDir = compiler.options.output.path || DEFAULT_OUTPUT_PATH,
          _options$filepath = this.options.filepath,
          filepath = _options$filepath === undefined ? _path2.default.join(fileDir, this.options.filename) : _options$filepath,
          workerOptions = _extends({}, config, this.options, this.overrides);


      return (0, _del2.default)(filepath, { force: this.options.forceDelete }).then(function () {
        return _swPrecache2.default.write(filepath, workerOptions);
      });
    }
  }]);

  return SWPrecacheWebpackPlugin;
}();

module.exports = SWPrecacheWebpackPlugin;