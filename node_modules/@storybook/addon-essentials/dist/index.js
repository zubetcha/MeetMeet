"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.managerEntries = managerEntries;

var _fs = _interopRequireDefault(require("fs"));

var _nodeLogger = require("@storybook/node-logger");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var packageJson = {};

if (_fs["default"].existsSync('./package.json')) {
  try {
    packageJson = JSON.parse(_fs["default"].readFileSync('./package.json').toString());
  } catch (err) {
    _nodeLogger.logger.error("Error reading package.json: ".concat(err.message));
  }
}

var isInstalled = function isInstalled(addon) {
  var _packageJson = packageJson,
      dependencies = _packageJson.dependencies,
      devDependencies = _packageJson.devDependencies;
  return dependencies && dependencies[addon] || devDependencies && devDependencies[addon];
};

var makeAddon = function makeAddon(key) {
  return "@storybook/addon-".concat(key);
};

function managerEntries() {
  var entry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var registerAddons = ['backgrounds', 'viewport'].filter(function (key) {
    return options[key] !== false;
  }).map(function (key) {
    return makeAddon(key);
  }).filter(function (addon) {
    return !isInstalled(addon);
  }).map(function (addon) {
    return "".concat(addon, "/register");
  });
  return [].concat(_toConsumableArray(entry), _toConsumableArray(registerAddons));
}